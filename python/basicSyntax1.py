# 프로그래밍
# : 문제 해결 위한 "명령어" 의 집합 / 새 연산을 정의하고 조합해서 유용한 작업 수행하는 것
# ex. 버스 정류장에서 내려서 2블럭 직진 후, 왼쪽 골목으로 들어와
# 지시사항,명령어 모이는 하나의 프로그램이 됨.
# 프로그램은 기초 연산으로 구성됨. 
# 컴퓨터는 더 다양한 연산 집합 가짐
 
# 프로그래밍 언어
# : 컴퓨터에게 작업 지시, 문제 해결하는 도구

# 왜 파이썬 공부? 
# -> 인공 지능(AI), 머신러닝(ML) 개발에 사용됨 
#이유: (1) 압도적 전문 라이브러리 많음. AI 개발 핵심 도구들이 파이썬으로 제공, 복잡한 기능 쉽게 구현 가능
# (2) 러닝 커브 낮음, 아이디어 빠르게 프로토타입으로 구현 가능(연구,개발에 효율적)
#(3) 많은 개발자들이 씀. 생태계, 커뮤니티 큼(관련자료 많은, 문제해결 도움용이)

# 파이썬 인터프리터 사용법 (실제로 쓸 일 없음)
# 터미널에 python -i
print('hello world')

# 표현식(Expression)
# : 하나의 '값' 으로 평가 되는 모든 코드
# ex. 3 + 5 , x > 10 , 5 * 4

# 값
# : 표현식의 결과. / 더이상 계산되지 x 평가불가능 / 프로그램의 가장 기본적 데이터 조각
# ex. 숫자 값, 문자열값 "안녕", 불리언 값 True, False
### 주의 : 모든 값은 단순 형태 표현식 ㅇ, 모든 표현식이 값이다 x 
# 3 +5 는 표현식이지만, 그 자체로 값은 아님. 평가 거쳐야 값 8이 됨.

# 강사 강의들을 때 명령어 써라
cd 01-fundamentals-of-python/
ls 
python 01-basic.py

# 변수 개념? 
# : 값을 재사용하기 위해, 작명(이름붙임)
# 할당문 : 변수 할당하는 문장
# ex. degrees = 36.5  / 값 36.5 를 변수 degrees 에 할당함. (오른쪽 값을-> 왼쪽 변수에 할당)
# 변수명 규칙 
# (1) 영문 알파벳, 언더스코어(_) , 숫자 로 구성
# (2) 숫자로 시작 불가
# (3) 대소문자 구분함.
# (4) 파이썬 내부 예약어 (고정해두고 많이 사용함. 변수로 사용 불가)
# False, None, Ture 등

# 변수 , 값, 메모리
# 메모리 주소 : 메모리 모든 위치에 그 위치를 고유하게 식별하는 좌표 (집주소 같은거)
# - 고유한 id(메모리 주소)
# - 타입 : 제품 종류(ex. int, str, float)
# - 값 : 제품 실제 내용물
### 위 3개 묶어서 객체(Objdect) 라고 함. (값 + 타입 + 주소)
### 주의 : 변수는 메모리 주소를 가지지 않음.
# 변수는 특정 객체를 "가리키는 point to" 이름표
# 파이썬 = 객체 지향 언어

# 결론 : 변수 ? -> 객체에  붙인 이름표 

# 재할당 개념
degrees = 'hello'
# 재할당 되면 이전 값 기억x 새로운 값 기억

# 재할당 예제
number = 10
double = 2 * number
print(double) #20 

number = 5
print(double) 
# 20 
#왜? double 도 변수다. 재할당 전까진 처음 값 저장됨.

# 데이터

# 데이터 타입 개념
# : 값의 종류 + 적용 가능한 행동 의 묶음

# int (정수자료형)
# : 소수점 없는 숫자
sutdent_count = 30
temperature = -5
balance = 0

# float (실수, 소수점 있음)
# 양수, 0, 음수
pi = 3.14
weight = 65.5
tax_rate = 0.1

# 지수 표현법
# : 아주 큰, 작은 실수 간결표현하는 방식
# 거듭제곱 (지수) : ^ 
# 1,230,000,000 (1.23 * 10^9)
big_number = 1.23e9

# 숫자형의 '행동' (산술연산, 계산)
# 산술 연산자
# + , -, * , /(나눗셈),//(몫구하기), %(나머지 구하기), **(거듭제곱) -(음수부호)
# 연산자 우선순위
#(1) ** 지수
# (2) 음수부호 -
# (3) *,/,//,%
# (4) + , -
# 순서 헷갈릴 때 '소괄호()' 사용해서 연산 먼저 수행하도록하기
# ex. (2+3) * 4 # 20 
# 예제
-2 ** 4 # -16. 2를 4제곱 후 음수부호
-(2**4) # -16. 거듭제곱 후 음수부호
(-2) ** 4 # 16 

# Sequence Types 시퀀스 타입
# 여러 값을 순서대로 나열해서 저장
# ex. str, tuple, list, range
### 각 데이터는 기차칸처럼 인덱싱
# 모든 칸에 0부터 시작하는 고유번호(인덱스) 있음
# 인덱스로 원하는 칸 데이터에 바로 접근 가능
### 시퀀스 타입 특징(공통)
# (1) 순서 존재 (정렬은 되어있지 x)
# (2) 고유번호(위치) 인덱스 존재
# (3) 슬라이싱 가능(순서 있기 때문)
# (4) 길이 있음
len() # 길이 구하는 함수
# 반복 가능 (반복문 사용하여 값을 하나씩 꺼내기 가능)
#  
for 

# 시퀀스타입 예시
my_data = "hello" (str 데이터)
# 인덱싱 ex. my_data[1] # 'e'
# 슬라이싱
# 길이
# 반복


###시퀀스 활용법###

# 문자열 개념
# : 문자들의 변경 불가능 (불변성 중요)

# 만드는 법 : "" , ''
##(주의) 혼용 금지 하나로 통일
print('hello world')
# 따옴표 활용
print('문자열 안에 "큰 따옴표" 사용 하려면 작은 따옴표로 묶는다.')
# 특수 표현(이스케이프) 
print ('He\' s a boy')
# He's a boy

# 줄바꿈(엔터)
print ('' \
'첫째 줄\n 둘째줄') 

#여러줄 문자열 작성
multi_line_str = """
이것은
여러 줄로 이루어진
문자열입니다.
"""
print(multi_line_str)

# 문자열에 값 삽입 (f-string)
# : (매일 씀) 문자열 내에 변수, 표현식 결과 삽입 강력
# 사용법 : 문자열 시작 전 'f' 접두어 . 삽입할 부분 {}
name ='홍길동'
age = 25
greeting = f'안녕, 내이름{name} 이고 나이는 {age}살임.'
print(greeting)

# 추가 학습 : f-sting 심화 학습, 개념명 기억x

### 시퀀스로써 문자열 활용
# : 인덱싱,슬라이싱,길이확인,반복 사용 가능
# 인덱스 0번부터 꼭 기억
## (주의) 파이썬 -> 음수 인덱싱 지원
# -5 -4 -3 -2 -1 0 1 2 3 4 
# - 시퀀스의 끝에서 세기 가능 (0 포함 X)
'hello'
#[-1] => 'o'
#[-2] => 'l'

# 슬라이싱 
# : 시퀀스 일부 잘라서 새로운 시퀀스 생성
# 시작 인덱스와 끝 인덱스를 지정해서 해당 범위 값 포함하는 새로운 시퀀스 생성

# 슬라이싱 사용법
my_sequence[start:stop:step]
# start : 슬라이싱을 
# stop :
# step
# 슬라이싱 예제1
# 왜 끝에 값이 빠질까??
'hello'
my_str[2:4] # ll (왜 o 는 포함 안됨?)
# n번 해버리면 n-1 이라고 표현 (갯수 맞음, 컴터는 0부터 세고, 사람은 1부터 셈)

# 예제2 
'hello'
my_str[:3] # hel (0부터3)

# 예제3
'hello'
my_str[3:] # lo (3부터 끝)

#예제4
'hello'
my_str[::2] # hlo
## 따로 공부하기

# 예제 4 (음수)
채워

# 문자열 변경 시도 (안됨x)
my_str = 'hello'
my_str[1] = 'a'
error
# 접근, 슬라이싱, 반복 가능하지만 수정 안됨
### 주의 : 재할당은 가능(이름표 교체)
## 값은 변경 불가능

### 문자열 변경 x, 새로 생성 가능
my_str = 'hello'
new_str = my_str = my_str[0] + 'a' + my_str[2:]
#hallo
print(new_str)
# 출력 hallo 니까 값 변경되거 아님? 아님. 재할당된것임(새로운 값을 가리키도록. 재할당 문법 지우면 hello)

##### 참고 #####
# int 진법 표현(10진법)
공부해라
# 반올림 오차 
# 왜? 컴터는 2진법 쓰기 때문, 사람은 10진법 씀
# 그렇게 되면 '무한소수 발생' , '근사값 저장'.
# ex. 0.1(10진수) -> 0.0001100110011 (2진수)
# 메모리는 유한하기 때문에 컴터는 가까운 근사값으로 저장 (연산 오차 발생 가능성)

## 반올림 오차 해결법
# : decimal 모듈 사용
from decimal import Decimal

a=Decimal('3.2') - Decimal('3.1')
b=Decimal('1.2') - Decimal('1.1')

print(a) #0.1
print(b) #0.1
print(a == b) #True

### 문장 이란????
# 문장 : 값이 남는 행위 아님. 명령이라고 생각해라
# 값이 결과로 안나옴
# ex. (할당문,조건문,반복문)

# 표현식
10 + 10 
# 값이 결과로 나옴

# 스타일 가이드 style guide
# 변수명 잘 지어라 a= 이따구 금지
# 스타일가이드 : 코드 일관성, 가독성 향상 위한 규칙, 권장 사항모음 (파이썬 => PEP 8)

## 파이썬 스타일가이드
#- 변수명은 직관적 작명
# - 할당 연산자 사이는 공백 1칸
# - 탭키로 들여쓰기
# 

## 주석
# 한줄 주석 
'''여러줄 주석'''
# 주석 단축키 
# 주석 하고 싶은 부분 ctrl+ /

### 파이썬 튜터 ????
# : 파이썬 코드 한줄씩 어떻게 실행되는지 보는 시각화 도구



###### 팁 #####
# 모르는 심화 개념 땅굴 파지 마라
# 알고만 넘어가자
# 최적화 금지, 패션코딩 된다. 로직 이해가 중요

###### SWAE 실습 #####
# 1431
# 3152
# 1436
# 1437
# 1434
# 1433
# 1432
